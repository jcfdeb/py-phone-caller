  # Work In Progress - Alpha release
  # Run with: "ansible-playbook --connection=local --limit=127.0.0.1 --inventory=127.0.0.1, py-phone-caller-podman.yml"
  # ToDo: take out the all data into a var file...
  - name: "Configuring 'py-phone-caller' installed through 'Podman'"
    hosts: localhost
    connection: local
    vars_files:
      - py_phone_caller_vars_file.yml

    tasks:

    - name: "Creating the 'py-phone-caller' directory tree at '{{ installation_folder }}/{{ installation_folder_name }}'"
      file:
        path: "{{ installation_folder }}/{{ installation_folder_name }}/config"
        state: directory
        owner: "{{ installation_user }}"
        group: "{{ installation_user }}"
        mode: 0755
        recurse: yes

    - name: "Check that the 'caller_config.toml' exists"
      stat:
        path: "{{ py_phone_caller_config_path }}"
      register: caller_config
      ignore_errors: yes

    - name: "Download the 'caller_config.toml' template file"
      get_url:
        url: "{{ caller_config_toml_template_url }}"
        dest: "{{ py_phone_caller_config_tmp_path }}"
        owner: "{{ installation_user }}"
        group: "{{ installation_user }}"
        mode: 0644
      when: not caller_config.stat.exists

    - name: "Creating the configuration file 'caller_config.toml' through a template"
      template:
        src: "{{ py_phone_caller_config_tmp_path }}"
        dest: "{{ py_phone_caller_config_path }}"
        owner: "{{ installation_user }}"
        group: "{{ installation_user }}"
        mode: 0644
      when: not caller_config.stat.exists

    - name: "Creating the 'py-phone-caller' container network"
      containers.podman.podman_network:
        name: "{{ py_phone_caller_network }}"
        internal: false
        disable_dns: yes # In order to resolve external hosts
        subnet: "{{ py_phone_caller_subnet }}"

    - name: "PostgreSQL 'pgdata' volume management"
      block:
      - name: "Checking if the 'pgdata' volume exists"
        ansible.builtin.command: podman volume inspect pgdata

      rescue:
      - name: "Creating the 'pgdata' volume for the PostgreSQL container"
        ansible.builtin.command: podman volume create pgdata

    - name: "Creating the 'postgres_13' container"
      containers.podman.podman_container:
        name: postgres_13
        image: "{{ postgresql_container_image }}"
        state: started
        restart: no
        restart_policy: "always"
        volume:
            - pgdata:/var/lib/postgresql/data
        network:
            - "{{ py_phone_caller_network }}"
        ip: "{{ postgres_ip }}"
        ports:
            #- "127.0.0.1:5432:5432"
            - "5432:5432" # Development
        env:
            PGDATA: /var/lib/postgresql/data/pgdata
            POSTGRES_PASSWORD: "{{ postgresql_admin_pass }}" # Development password...

    - name: "Creating the 'asterisk_call' container"
      containers.podman.podman_container:
        name: asterisk_call
        image: "{{ container_registry_url }}/asterisk_call:{{ py_phone_caller_version }}"
        state: started
        restart: no
        restart_policy: "always"
        volume:
            - "{{ py_phone_caller_config_path }}:{{ config_mounted_in_container }}"
        network:
            - "{{ py_phone_caller_network }}"
        ip: "{{ asterisk_call_ip }}"
        ports:
            - "{{ asterisk_call_port }}:{{ asterisk_call_port }}"

    - name: "Creating the 'caller_prometheus_webhook' container"
      containers.podman.podman_container:
        name: caller_prometheus_webhook
        image: "{{ container_registry_url }}/caller_prometheus_webhook:{{ py_phone_caller_version }}"
        state: started
        restart: no
        restart_policy: "always"
        volume:
            - "{{ py_phone_caller_config_path }}:{{ config_mounted_in_container }}"
        network:
            - "{{ py_phone_caller_network }}"
        ip: "{{ caller_prometheus_webhook_ip }}"
        ports:
            - "{{ prometheus_webhook_port }}:{{ prometheus_webhook_port }}"

    - name: "Creating the 'caller_sms' container"
      containers.podman.podman_container:
        name: caller_sms
        image: "{{ container_registry_url }}/caller_sms:{{ py_phone_caller_version }}"
        state: started
        restart: no
        restart_policy: "always"
        volume:
            - "{{ py_phone_caller_config_path }}:{{ config_mounted_in_container }}"
        network:
            - "{{ py_phone_caller_network }}"
        ip: "{{ caller_sms_ip }}"
        ports:
            - "{{ caller_sms_port }}:{{ caller_sms_port }}"

    - name: "Creating the 'generate_audio' container"
      containers.podman.podman_container:
        name: generate_audio
        image: "{{ container_registry_url }}/generate_audio:{{ py_phone_caller_version }}"
        state: started
        restart: no
        restart_policy: "always"
        volume:
            - "{{ py_phone_caller_config_path }}:{{ config_mounted_in_container }}"
        network:
            - "{{ py_phone_caller_network }}"
        ip: "{{ generate_audio_ip }}"
        ports:
            - "{{ generate_audio_port }}:{{ generate_audio_port }}"

    - name: "Creating the 'py_phone_caller' PostgreSQL user"
      community.postgresql.postgresql_user:
        login_host: "{{ postgresql_login_host }}"
        login_user: "{{ postgresql_admin }}"
        login_password: "{{ postgresql_admin_pass }}"
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        state: "present"

    - name: "'py_phone_caller' DB Management"
      block:
      - name: "Gattering info about the 'py_phone_caller' DB (if exists)"
        community.postgresql.postgresql_info:
          login_host: "{{ postgresql_login_host }}"
          login_user: "{{ postgresql_admin }}"
          login_password: "{{ postgresql_admin_pass }}"
          db: "{{ db_name }}"

      rescue:
      - name: "Download the dumped 'py_phone_caller' DB schema (SQL format)"
        get_url:
          url: "{{ db_schema_url }}"
          dest: /tmp/db-schema.sql
          mode: 0600

      - name: "Creating the 'py_phone_caller' DB"
        community.postgresql.postgresql_db:
          login_host: "{{ postgresql_login_host }}"
          login_user: "{{ postgresql_admin }}"
          login_password: "{{ postgresql_admin_pass }}"
          name: "{{ db_name }}"
          owner: "{{ db_user }}"
          state: present

      - name: "Restoring the 'py_phone_caller' DB by restoring a dump of the schema"
        community.postgresql.postgresql_db:
          login_host: "{{ postgresql_login_host }}"
          login_user: "{{ postgresql_admin }}"
          login_password: "{{ postgresql_admin_pass }}"
          name: "{{ db_name }}"
          owner: "{{ db_user }}"
          state: restore
          target: /tmp/db-schema.sql

    - name: "Creating the 'asterisk_ws_monitor' container"
      containers.podman.podman_container:
        name: asterisk_ws_monitor
        image: "{{ container_registry_url }}/asterisk_ws_monitor:{{ py_phone_caller_version }}"
        state: started
        restart: no
        restart_policy: "always"
        volume:
            - "{{ py_phone_caller_config_path }}:{{ config_mounted_in_container }}"
        network:
            - "{{ py_phone_caller_network }}"
        ip: "{{ asterisk_ws_monitor_ip }}"

    - name: "Creating the 'asterisk_recall' container"
      containers.podman.podman_container:
        name: asterisk_recall
        image: "{{ container_registry_url }}/asterisk_recall:{{ py_phone_caller_version }}"
        state: started
        restart: no
        restart_policy: "always"
        volume:
            - "{{ py_phone_caller_config_path }}:{{ config_mounted_in_container }}"
        network:
            - "{{ py_phone_caller_network }}"
        ip: "{{ asterisk_recall_ip }}"
        etc_hosts:
             postgres-service: "{{ postgres_ip }}"

    - name: "Creating the 'call_register' container"
      containers.podman.podman_container:
        name: call_register
        image: "{{ container_registry_url }}/call_register:{{ py_phone_caller_version }}"
        state: started
        restart: no
        restart_policy: "always"
        volume:
            - "{{ py_phone_caller_config_path }}:{{ config_mounted_in_container }}"
        network:
            - "{{ py_phone_caller_network }}"
        ip: "{{ call_register_ip }}"
        ports:
            - "{{ call_register_port }}:{{ call_register_port }}"
        etc_hosts:
             postgres-service: "{{ postgres_ip }}"

    - name: "Creating the Systemd user folder"
      file:
        path: "/home/{{ lookup('env','USER') }}/.config/systemd/user"
        state: directory
        owner: "{{ installation_user }}"
        group: "{{ installation_user }}"
        mode: 0750
        recurse: yes

    - name: "Download the Systemd Unit files"
      get_url:
        url: "{{ item.url }}"
        dest: "{{ systemd_user_path }}/{{ item.path }}"
        owner: "{{ installation_user }}"
        group: "{{ installation_user }}"
        mode: 0640
      with_items:
        - { "url" : "{{ container_asterisk_call_service_url }}", "path" : "{{ container_asterisk_call_service_unit }}" }
        - { "url" : "{{ container_asterisk_call_register_service_url }}", "path" : "{{ container_asterisk_call_register_service_unit }}" }
        - { "url" : "{{ container_asterisk_recall_service_url }}", "path" : "{{ container_asterisk_recall_service_unit }}" }
        - { "url" : "{{ container_asterisk_ws_monitor_service_url }}", "path" : "{{ container_asterisk_ws_monitor_service_unit }}" }
        - { "url" : "{{ container_caller_prometheus_webhook_service_url }}", "path" : "{{ container_caller_prometheus_webhook_service_unit }}" }
        - { "url" : "{{ container_caller_sms_service_url }}", "path" : "{{ container_caller_sms_service_unit }}" }
        - { "url" : "{{ container_generate_audio_service_url }}", "path" : "{{ container_generate_audio_service_unit }}" }
        - { "url" : "{{ container_postgres_13_service_url }}", "path" : "{{ container_postgres_13_service_unit }}" }

    - name: "Enable and run the user SystemD services for 'py-phone-caller'"
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: yes
        daemon_reload: yes
        state: started
        scope: user
      with_items:
        - "{{ container_asterisk_call_service_unit }}"
        - "{{ container_asterisk_call_register_service_unit }}"
        - "{{ container_asterisk_recall_service_unit }}"
        - "{{ container_asterisk_ws_monitor_service_unit }}"
        - "{{ container_caller_prometheus_webhook_service_unit }}"
        - "{{ container_caller_sms_service_unit }}"
        - "{{ container_generate_audio_service_unit }}"
        - "{{ container_postgres_13_service_unit }}"

    - name: "Deleting the '/tmp' files"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/db-schema.sql
        - "{{ py_phone_caller_config_tmp_path }}"
